// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_stdio.proto

package plugin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StdioRequest_Channel int32

const (
	StdioRequest_stdout StdioRequest_Channel = 0
	StdioRequest_stderr StdioRequest_Channel = 1
)

var StdioRequest_Channel_name = map[int32]string{
	0: "stdout",
	1: "stderr",
}

var StdioRequest_Channel_value = map[string]int32{
	"stdout": 0,
	"stderr": 1,
}

func (x StdioRequest_Channel) String() string {
	return proto.EnumName(StdioRequest_Channel_name, int32(x))
}

func (StdioRequest_Channel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f028d01c4fc97d40, []int{0, 0}
}

// We use two separate request paths for stderr, and stdout. This does not give an ordering guarantee between
// the two streams, which is a weaker API than if we were to combine them.
type StdioRequest struct {
	Channel              StdioRequest_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=plugin.StdioRequest_Channel" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StdioRequest) Reset()         { *m = StdioRequest{} }
func (m *StdioRequest) String() string { return proto.CompactTextString(m) }
func (*StdioRequest) ProtoMessage()    {}
func (*StdioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f028d01c4fc97d40, []int{0}
}

func (m *StdioRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StdioRequest.Unmarshal(m, b)
}
func (m *StdioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StdioRequest.Marshal(b, m, deterministic)
}
func (m *StdioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdioRequest.Merge(m, src)
}
func (m *StdioRequest) XXX_Size() int {
	return xxx_messageInfo_StdioRequest.Size(m)
}
func (m *StdioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StdioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StdioRequest proto.InternalMessageInfo

func (m *StdioRequest) GetChannel() StdioRequest_Channel {
	if m != nil {
		return m.Channel
	}
	return StdioRequest_stdout
}

type StdioResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StdioResponse) Reset()         { *m = StdioResponse{} }
func (m *StdioResponse) String() string { return proto.CompactTextString(m) }
func (*StdioResponse) ProtoMessage()    {}
func (*StdioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f028d01c4fc97d40, []int{1}
}

func (m *StdioResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StdioResponse.Unmarshal(m, b)
}
func (m *StdioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StdioResponse.Marshal(b, m, deterministic)
}
func (m *StdioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdioResponse.Merge(m, src)
}
func (m *StdioResponse) XXX_Size() int {
	return xxx_messageInfo_StdioResponse.Size(m)
}
func (m *StdioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StdioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StdioResponse proto.InternalMessageInfo

func (m *StdioResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("plugin.StdioRequest_Channel", StdioRequest_Channel_name, StdioRequest_Channel_value)
	proto.RegisterType((*StdioRequest)(nil), "plugin.StdioRequest")
	proto.RegisterType((*StdioResponse)(nil), "plugin.StdioResponse")
}

func init() { proto.RegisterFile("grpc_stdio.proto", fileDescriptor_f028d01c4fc97d40) }

var fileDescriptor_f028d01c4fc97d40 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2f, 0x2a, 0x48,
	0x8e, 0x2f, 0x2e, 0x49, 0xc9, 0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0xc8,
	0x29, 0x4d, 0xcf, 0xcc, 0x53, 0xca, 0xe4, 0xe2, 0x09, 0x06, 0x09, 0x07, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x99, 0x71, 0xb1, 0x27, 0x67, 0x24, 0xe6, 0xe5, 0xa5, 0xe6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0xf0, 0x19, 0xc9, 0xe8, 0x41, 0x54, 0xea, 0x21, 0x2b, 0xd3, 0x73, 0x86, 0xa8, 0x09,
	0x82, 0x29, 0x56, 0x52, 0xe4, 0x62, 0x87, 0x8a, 0x09, 0x71, 0x71, 0xb1, 0x15, 0x97, 0xa4, 0xe4,
	0x97, 0x96, 0x08, 0x30, 0x40, 0xd9, 0xa9, 0x45, 0x45, 0x02, 0x8c, 0x4a, 0xca, 0x5c, 0xbc, 0x50,
	0x33, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0xc1,
	0x16, 0xf1, 0x04, 0x81, 0xd9, 0x46, 0xee, 0x5c, 0x9c, 0xee, 0x41, 0x01, 0xce, 0x60, 0x85, 0x42,
	0x56, 0x5c, 0x9c, 0x41, 0xa9, 0x89, 0x29, 0x10, 0x8e, 0x08, 0x36, 0x87, 0x48, 0x89, 0xa2, 0x89,
	0x42, 0x8c, 0x36, 0x60, 0x74, 0xe2, 0x88, 0x82, 0x7a, 0x31, 0x89, 0x0d, 0xec, 0x63, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x7e, 0x4c, 0x71, 0x05, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCStdioClient is the client API for GRPCStdio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCStdioClient interface {
	ReadStdio(ctx context.Context, in *StdioRequest, opts ...grpc.CallOption) (GRPCStdio_ReadStdioClient, error)
}

type gRPCStdioClient struct {
	cc *grpc.ClientConn
}

func NewGRPCStdioClient(cc *grpc.ClientConn) GRPCStdioClient {
	return &gRPCStdioClient{cc}
}

func (c *gRPCStdioClient) ReadStdio(ctx context.Context, in *StdioRequest, opts ...grpc.CallOption) (GRPCStdio_ReadStdioClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCStdio_serviceDesc.Streams[0], "/plugin.GRPCStdio/ReadStdio", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCStdioReadStdioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCStdio_ReadStdioClient interface {
	Recv() (*StdioResponse, error)
	grpc.ClientStream
}

type gRPCStdioReadStdioClient struct {
	grpc.ClientStream
}

func (x *gRPCStdioReadStdioClient) Recv() (*StdioResponse, error) {
	m := new(StdioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCStdioServer is the server API for GRPCStdio service.
type GRPCStdioServer interface {
	ReadStdio(*StdioRequest, GRPCStdio_ReadStdioServer) error
}

func RegisterGRPCStdioServer(s *grpc.Server, srv GRPCStdioServer) {
	s.RegisterService(&_GRPCStdio_serviceDesc, srv)
}

func _GRPCStdio_ReadStdio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StdioRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCStdioServer).ReadStdio(m, &gRPCStdioReadStdioServer{stream})
}

type GRPCStdio_ReadStdioServer interface {
	Send(*StdioResponse) error
	grpc.ServerStream
}

type gRPCStdioReadStdioServer struct {
	grpc.ServerStream
}

func (x *gRPCStdioReadStdioServer) Send(m *StdioResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCStdio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.GRPCStdio",
	HandlerType: (*GRPCStdioServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadStdio",
			Handler:       _GRPCStdio_ReadStdio_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_stdio.proto",
}
