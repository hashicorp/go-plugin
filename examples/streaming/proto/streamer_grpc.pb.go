// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: streamer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamerService_Configure_FullMethodName = "/proto.StreamerService/Configure"
	StreamerService_Read_FullMethodName      = "/proto.StreamerService/Read"
	StreamerService_Write_FullMethodName     = "/proto.StreamerService/Write"
)

// StreamerServiceClient is the client API for StreamerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerServiceClient interface {
	Configure(ctx context.Context, in *Configure_Request, opts ...grpc.CallOption) (*Configure_Response, error)
	Read(ctx context.Context, in *Read_Request, opts ...grpc.CallOption) (StreamerService_ReadClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (StreamerService_WriteClient, error)
}

type streamerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerServiceClient(cc grpc.ClientConnInterface) StreamerServiceClient {
	return &streamerServiceClient{cc}
}

func (c *streamerServiceClient) Configure(ctx context.Context, in *Configure_Request, opts ...grpc.CallOption) (*Configure_Response, error) {
	out := new(Configure_Response)
	err := c.cc.Invoke(ctx, StreamerService_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerServiceClient) Read(ctx context.Context, in *Read_Request, opts ...grpc.CallOption) (StreamerService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamerService_ServiceDesc.Streams[0], StreamerService_Read_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamerService_ReadClient interface {
	Recv() (*Read_ResponseChunk, error)
	grpc.ClientStream
}

type streamerServiceReadClient struct {
	grpc.ClientStream
}

func (x *streamerServiceReadClient) Recv() (*Read_ResponseChunk, error) {
	m := new(Read_ResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamerServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (StreamerService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamerService_ServiceDesc.Streams[1], StreamerService_Write_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerServiceWriteClient{stream}
	return x, nil
}

type StreamerService_WriteClient interface {
	Send(*Write_RequestChunk) error
	CloseAndRecv() (*Write_Response, error)
	grpc.ClientStream
}

type streamerServiceWriteClient struct {
	grpc.ClientStream
}

func (x *streamerServiceWriteClient) Send(m *Write_RequestChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerServiceWriteClient) CloseAndRecv() (*Write_Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Write_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServiceServer is the server API for StreamerService service.
// All implementations must embed UnimplementedStreamerServiceServer
// for forward compatibility
type StreamerServiceServer interface {
	Configure(context.Context, *Configure_Request) (*Configure_Response, error)
	Read(*Read_Request, StreamerService_ReadServer) error
	Write(StreamerService_WriteServer) error
	mustEmbedUnimplementedStreamerServiceServer()
}

// UnimplementedStreamerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServiceServer struct {
}

func (UnimplementedStreamerServiceServer) Configure(context.Context, *Configure_Request) (*Configure_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedStreamerServiceServer) Read(*Read_Request, StreamerService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedStreamerServiceServer) Write(StreamerService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedStreamerServiceServer) mustEmbedUnimplementedStreamerServiceServer() {}

// UnsafeStreamerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServiceServer will
// result in compilation errors.
type UnsafeStreamerServiceServer interface {
	mustEmbedUnimplementedStreamerServiceServer()
}

func RegisterStreamerServiceServer(s grpc.ServiceRegistrar, srv StreamerServiceServer) {
	s.RegisterService(&StreamerService_ServiceDesc, srv)
}

func _StreamerService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configure_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamerService_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServiceServer).Configure(ctx, req.(*Configure_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamerService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Read_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServiceServer).Read(m, &streamerServiceReadServer{stream})
}

type StreamerService_ReadServer interface {
	Send(*Read_ResponseChunk) error
	grpc.ServerStream
}

type streamerServiceReadServer struct {
	grpc.ServerStream
}

func (x *streamerServiceReadServer) Send(m *Read_ResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamerService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServiceServer).Write(&streamerServiceWriteServer{stream})
}

type StreamerService_WriteServer interface {
	SendAndClose(*Write_Response) error
	Recv() (*Write_RequestChunk, error)
	grpc.ServerStream
}

type streamerServiceWriteServer struct {
	grpc.ServerStream
}

func (x *streamerServiceWriteServer) SendAndClose(m *Write_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerServiceWriteServer) Recv() (*Write_RequestChunk, error) {
	m := new(Write_RequestChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerService_ServiceDesc is the grpc.ServiceDesc for StreamerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamerService",
	HandlerType: (*StreamerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _StreamerService_Configure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _StreamerService_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _StreamerService_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "streamer.proto",
}
